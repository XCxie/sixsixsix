<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\UCOSII-1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\UCOSII-1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Sep 06 10:59:29 2022
<BR><P>
<H3>Maximum Stack Usage =       2920 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Time_task &rArr; TypeC_UartDriver &rArr; Driver_SendChardata &rArr; GetCRC16
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[129]">OS_CPU_SR_Save</a>
 <LI><a href="#[12c]">OS_CPU_SR_Restore</a>
 <LI><a href="#[12e]">OSStartHighRdy</a>
 <LI><a href="#[13c]">OSCtxSw</a>
 <LI><a href="#[12b]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">Flash_task</a> from task.o(i.Flash_task) referenced from main.o(i.start_task)
 <LI><a href="#[50]">HIM_task</a> from task.o(i.HIM_task) referenced from main.o(i.start_task)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[4a]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[4b]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">SYS_task</a> from task.o(i.SYS_task) referenced from main.o(i.start_task)
 <LI><a href="#[9]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">Time_task</a> from task.o(i.Time_task) referenced from main.o(i.start_task)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from driver_usart.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usbtype-c.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from hmi_user_uart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">Udisk_task</a> from task.o(i.Udisk_task) referenced from main.o(i.start_task)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UsartDriverRev_task</a> from task.o(i.UsartDriverRev_task) referenced from main.o(i.start_task)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[4c]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4e]">start_task</a> from main.o(i.start_task) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[187]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ad]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[188]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[189]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[12c]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[12e]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[13c]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[12b]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>CH374GetVer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
</UL>

<P><STRONG><a name="[7a]"></a>CH374s01</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[57]"></a>CH374DelaymS</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CH374DelaymS &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[5b]"></a>CH374EmbHubAttach</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374EmbHubAttach &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>

<P><STRONG><a name="[5c]"></a>CH374HostTransact</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[5f]"></a>CH374DirtyBuffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[5e]"></a>CH374CtrlTransfer</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
</UL>

<P><STRONG><a name="[61]"></a>CH374DiskConnect</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>

<P><STRONG><a name="[64]"></a>CH374s05</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CH374s05 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[65]"></a>CH374Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH374Init &rArr; CH374s29 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
</UL>

<P><STRONG><a name="[66]"></a>CH374EmbHubEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374EmbHubEnable &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[67]"></a>CH374s23</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CH374s23 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
</UL>

<P><STRONG><a name="[69]"></a>CH374s21</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[6a]"></a>CH374s17</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374s17 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[6b]"></a>CH374BulkOnlyCmd</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[6d]"></a>CH374s13</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[72]"></a>mReturnErrClose</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[6f]"></a>CH374s18</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CH374s18 &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[70]"></a>CH374s06</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CH374s06 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mReturnErrClose
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileModify
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[73]"></a>CH374s07</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelayAfterWrite
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mReturnErrClose
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileModify
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
</UL>

<P><STRONG><a name="[76]"></a>CH374s25</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CH374s25 &rArr; CH374s26 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[78]"></a>CH374s22</STRONG> (Thumb, 948 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[79]"></a>CH374s08</STRONG> (Thumb, 614 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CH374s08 &rArr; CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s01
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s02
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
</UL>

<P><STRONG><a name="[7c]"></a>CH374s09</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>

<P><STRONG><a name="[7d]"></a>CH374s10</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
</UL>

<P><STRONG><a name="[7e]"></a>CH374s32</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
</UL>

<P><STRONG><a name="[7f]"></a>CH374s11</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CH374s11 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[80]"></a>CH374s12</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CH374s12 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
</UL>

<P><STRONG><a name="[81]"></a>CH374FileOpen</STRONG> (Thumb, 748 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CH374FileOpen &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xFileNameEnumer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
</UL>

<P><STRONG><a name="[83]"></a>CH374s15</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CH374s15 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[84]"></a>CH374FileClose</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CH374FileClose &rArr; CH374s15 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
</UL>

<P><STRONG><a name="[85]"></a>CH374FileErase</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CH374FileErase &rArr; CH374FileOpen &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
</UL>

<P><STRONG><a name="[87]"></a>CH374s14</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
</UL>

<P><STRONG><a name="[86]"></a>CH374FileCreate</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CH374FileCreate &rArr; CH374FileErase &rArr; CH374FileOpen &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
</UL>

<P><STRONG><a name="[88]"></a>CH374FileModify</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[89]"></a>CH374DiskReady</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CH374DiskReady &rArr; CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
</UL>

<P><STRONG><a name="[8a]"></a>CH374s19</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteLocate
</UL>

<P><STRONG><a name="[8b]"></a>CH374s20</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[8d]"></a>CH374ByteLocate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, CH374BYT.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
</UL>

<P><STRONG><a name="[8e]"></a>CH374ByteRead</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, CH374BYT.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[8f]"></a>CH374ByteWrite</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, CH374BYT.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CH374ByteWrite &rArr; CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formationStr
</UL>

<P><STRONG><a name="[90]"></a>CH374DiskSize</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, CH374DSZ.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CH374DiskSize &rArr; CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
</UL>

<P><STRONG><a name="[92]"></a>CH374DiskQuery</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, CH374DSZ.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formationStr
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_task
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StructToStr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendChardata
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bd]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StructToStr
</UL>

<P><STRONG><a name="[160]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StructToStr
</UL>

<P><STRONG><a name="[16c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
</UL>

<P><STRONG><a name="[191]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pressure
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Pressure_display
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pressure
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Pressure_display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pressure
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Pressure_display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[194]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[195]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[196]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[97]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[a0]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[198]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[14a]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[152]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[109]"></a>Bolt_DiameterNumber</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, data_process.o(i.Bolt_DiameterNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bolt_DiameterNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[10a]"></a>Bolt_GradeNumber</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, data_process.o(i.Bolt_GradeNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bolt_GradeNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[b0]"></a>Bolt_Grade_display</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, him_user_process.o(i.Bolt_Grade_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bolt_Grade_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[b2]"></a>Bolt_Standard_display</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, him_user_process.o(i.Bolt_Standard_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bolt_Standard_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>CH374LibInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ch374drv.o(i.CH374LibInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH374LibInit &rArr; CH374Init &rArr; CH374s29 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374GetVer
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>CH374_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ch374drv.o(i.CH374_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CH374_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>CH374_READ_BLOCK</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_READ_BLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_READ_BLOCK &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[71]"></a>CH374_READ_BLOCK64</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_READ_BLOCK64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_READ_BLOCK64 &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[58]"></a>CH374_READ_REGISTER</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_READ_REGISTER))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
</UL>

<P><STRONG><a name="[6c]"></a>CH374_WRITE_BLOCK</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_BLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_WRITE_BLOCK &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[74]"></a>CH374_WRITE_BLOCK64</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_BLOCK64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_WRITE_BLOCK64 &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>

<P><STRONG><a name="[68]"></a>CH374_WRITE_BLOCK_C</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_BLOCK_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_WRITE_BLOCK_C &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
</UL>

<P><STRONG><a name="[5a]"></a>CH374_WRITE_REGISTER</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ch374drv.o(i.CH374_WRITE_REGISTER))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
</UL>

<P><STRONG><a name="[bc]"></a>Data_Record_Storage</STRONG> (Thumb, 1484 bytes, Stack size 72 bytes, mx25l6406.o(i.Data_Record_Storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Data_Record_Storage &rArr; Get_ActualTorque &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pressure
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ActualTorque
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_task
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>DisplayTime</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, him_user_process.o(i.DisplayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisplayTime &rArr; SetTextInt32 &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[c6]"></a>Driver_Send32DataValue</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, driver_user_driver.o(i.Driver_Send32DataValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = Driver_Send32DataValue &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DriverParameter
</UL>

<P><STRONG><a name="[ca]"></a>Driver_Send8DataValue</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, driver_user_driver.o(i.Driver_Send8DataValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = Driver_Send8DataValue &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DriverParameter
</UL>

<P><STRONG><a name="[cb]"></a>Driver_SendChardata</STRONG> (Thumb, 126 bytes, Stack size 288 bytes, driver_user_driver.o(i.Driver_SendChardata))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = Driver_SendChardata &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
</UL>

<P><STRONG><a name="[cd]"></a>Driver_UartInit</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, driver_usart.o(i.Driver_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Driver_UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>Driver_UartRead</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, driver_usart.o(i.Driver_UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Driver_UartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
</UL>

<P><STRONG><a name="[c8]"></a>Driver_UartWrite</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, driver_usart.o(i.Driver_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Driver_UartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send8DataValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendChardata
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send32DataValue
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>EXTIX_Init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, exti.o(i.EXTIX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTIX_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[df]"></a>Flash_Model_parameters</STRONG> (Thumb, 1034 bytes, Stack size 24 bytes, mx25l6406.o(i.Flash_Model_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Flash_Model_parameters &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ArrayCount
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_WriteU32
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_WriteU16
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_task
</UL>

<P><STRONG><a name="[52]"></a>Flash_task</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, task.o(i.Flash_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Flash_task &rArr; Data_Record_Storage &rArr; Get_ActualTorque &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[dd]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[dc]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write_EN
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read_status
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
</UL>

<P><STRONG><a name="[116]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write_EN
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read_status
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
</UL>

<P><STRONG><a name="[c7]"></a>GetCRC16</STRONG> (Thumb, 80 bytes, Stack size 536 bytes, crc16.o(i.GetCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send8DataValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendChardata
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send32DataValue
</UL>

<P><STRONG><a name="[c1]"></a>Get_ActualTorque</STRONG> (Thumb, 392 bytes, Stack size 80 bytes, data_process.o(i.Get_ActualTorque))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Get_ActualTorque &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
</UL>

<P><STRONG><a name="[e9]"></a>Get_Bolttorque_parameter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, data_process.o(i.Get_Bolttorque_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Bolttorque_parameter &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[eb]"></a>Get_Flash_Parameters</STRONG> (Thumb, 872 bytes, Stack size 144 bytes, mx25l6406.o(i.Get_Flash_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Get_Flash_Parameters &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_WriteU32
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_WriteU16
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU32
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU16
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>Get_GearTorque</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, data_process.o(i.Get_GearTorque))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Get_GearTorque &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[ee]"></a>Get_GearTorqueValue</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, him_user_process.o(i.Get_GearTorqueValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Get_GearTorqueValue &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[be]"></a>Get_Pressure</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, data_process.o(i.Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_Pressure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
</UL>

<P><STRONG><a name="[c0]"></a>Get_TargetTorque</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, data_process.o(i.Get_TargetTorque))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Get_TargetTorque &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Record_Storage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[ef]"></a>HIM_ActualPressureuint_display</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, him_user_process.o(i.HIM_ActualPressureuint_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HIM_ActualPressureuint_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f0]"></a>HIM_ChartStandard_display</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, him_user_process.o(i.HIM_ChartStandard_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HIM_ChartStandard_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f1]"></a>HIM_Cursor</STRONG> (Thumb, 2796 bytes, Stack size 16 bytes, him_user_process.o(i.HIM_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HIM_Cursor &rArr; SetControlForeColor &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f3]"></a>HIM_GearTorqueValue</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, him_user_process.o(i.HIM_GearTorqueValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HIM_GearTorqueValue &rArr; SetTextInt32 &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f4]"></a>HIM_Home_Switcher</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, him_user_process.o(i.HIM_Home_Switcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HIM_Home_Switcher &rArr; SetScreen &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f6]"></a>HIM_Language_display</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, him_user_process.o(i.HIM_Language_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HIM_Language_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLanguage
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f8]"></a>HIM_MaxTorqueUnit_display</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, him_user_process.o(i.HIM_MaxTorqueUnit_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HIM_MaxTorqueUnit_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f9]"></a>HIM_MaxTorque_display</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, him_user_process.o(i.HIM_MaxTorque_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HIM_MaxTorque_display &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[fa]"></a>HIM_Pressure_display</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, him_user_process.o(i.HIM_Pressure_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HIM_Pressure_display &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextFloat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[fc]"></a>HIM_Standard_display</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, him_user_process.o(i.HIM_Standard_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HIM_Standard_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[fd]"></a>HIM_TargetTorque_display</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, him_user_process.o(i.HIM_TargetTorque_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HIM_TargetTorque_display &rArr; SetTextInt32 &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[fe]"></a>HIM_TargetTorqueuint_display</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, him_user_process.o(i.HIM_TargetTorqueuint_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HIM_TargetTorqueuint_display &rArr; SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[50]"></a>HIM_task</STRONG> (Thumb, 19132 bytes, Stack size 56 bytes, task.o(i.HIM_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = HIM_task &rArr; Send_DriverParameter &rArr; Driver_Send8DataValue &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spanner_type_parameter
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spanner_Sensor_parameter
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextFlickerCycle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DriverParameter
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Bolttorque_parameter
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_TargetTorqueuint_display
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_TargetTorque_display
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Standard_display
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Pressure_display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorqueUnit_display
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Language_display
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Home_Switcher
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_GearTorqueValue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_ChartStandard_display
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_ActualPressureuint_display
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TargetTorque
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorqueValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GearTorque
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bolttorque_parameter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bolt_Standard_display
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bolt_Grade_display
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bolt_GradeNumber
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bolt_DiameterNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>Hmi_UartInit</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, hmi_user_uart.o(i.Hmi_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Hmi_UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[10d]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(i.IWDG_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_task
</UL>

<P><STRONG><a name="[10f]"></a>IWDG_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iwdg.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[111]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[112]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[110]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[108]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[103]"></a>KEY_Scan</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, gpio.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = KEY_Scan &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[e0]"></a>MX25L6406_Erase</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mx25l6406.o(i.MX25L6406_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX25L6406_Erase &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write_EN
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[118]"></a>MX25L6406_Init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, mx25l6406.o(i.MX25L6406_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX25L6406_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>MX25L6406_Read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mx25l6406.o(i.MX25L6406_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bolttorque_parameter
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU32
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_ReadU16
</UL>

<P><STRONG><a name="[ec]"></a>MX25L6406_ReadU16</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mx25l6406.o(i.MX25L6406_ReadU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX25L6406_ReadU16 &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
</UL>

<P><STRONG><a name="[ed]"></a>MX25L6406_ReadU32</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mx25l6406.o(i.MX25L6406_ReadU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX25L6406_ReadU32 &rArr; MX25L6406_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
</UL>

<P><STRONG><a name="[117]"></a>MX25L6406_Read_status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mx25l6406.o(i.MX25L6406_Read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX25L6406_Read_status &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
</UL>

<P><STRONG><a name="[e3]"></a>MX25L6406_Write</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mx25l6406.o(i.MX25L6406_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write_EN
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_WriteU32
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_WriteU16
</UL>

<P><STRONG><a name="[e1]"></a>MX25L6406_WriteU16</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mx25l6406.o(i.MX25L6406_WriteU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX25L6406_WriteU16 &rArr; MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
</UL>

<P><STRONG><a name="[e4]"></a>MX25L6406_WriteU32</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mx25l6406.o(i.MX25L6406_WriteU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX25L6406_WriteU32 &rArr; MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
</UL>

<P><STRONG><a name="[114]"></a>MX25L6406_Write_EN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mx25l6406.o(i.MX25L6406_Write_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>NVIC_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
</UL>

<P><STRONG><a name="[11c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[11d]"></a>OSInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[127]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[161]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[128]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12d]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[13d]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[130]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[13e]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[13f]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[136]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[140]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[137]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[131]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[138]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[49]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDriverRev_task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_task
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_task
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_task
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send8DataValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendChardata
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send32DataValue
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[139]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13a]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[123]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[13b]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[124]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[133]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[132]"></a>OS_TCBInit</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[4a]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[4b]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[141]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[135]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[149]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[cf]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[173]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[ce]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[172]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[af]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[174]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[14b]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[14e]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[14d]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[146]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[107]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[142]"></a>RTC_Get</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[145]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[148]"></a>RTC_Init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = RTC_Init &rArr; RTC_Set &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>RTC_Set</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RTC_Set &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[154]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[151]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[147]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[115]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mx25l6406.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write_EN
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read_status
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
</UL>

<P><STRONG><a name="[b6]"></a>SPI2_Init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ch374drv.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
</UL>

<P><STRONG><a name="[ba]"></a>SPI3_TransByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ch374drv.o(i.SPI3_TransByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi374Start
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
</UL>

<P><STRONG><a name="[11a]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[e2]"></a>SPI_Flash_Write</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, mx25l6406.o(i.SPI_Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
</UL>

<P><STRONG><a name="[158]"></a>SPI_Flash_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mx25l6406.o(i.SPI_Flash_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Flash_Write_NoCheck &rArr; MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[155]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[157]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[156]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[119]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SYS_task</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, task.o(i.SYS_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SYS_task &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[101]"></a>Select_Bolttorque_parameter</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, data_process.o(i.Select_Bolttorque_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_Bolttorque_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[159]"></a>SendChar</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hmi_user_uart.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextFloat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLanguage
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlForeColor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextInt32
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextFlickerCycle
</UL>

<P><STRONG><a name="[15a]"></a>SendStrings</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, him_user_driver.o(i.SendStrings))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValues
</UL>

<P><STRONG><a name="[102]"></a>Send_DriverParameter</STRONG> (Thumb, 620 bytes, Stack size 8 bytes, driver_user_driver.o(i.Send_DriverParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Send_DriverParameter &rArr; Driver_Send8DataValue &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spanner_type_OilReturnTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send8DataValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send32DataValue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[f2]"></a>SetControlForeColor</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, him_user_driver.o(i.SetControlForeColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetControlForeColor &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Cursor
</UL>

<P><STRONG><a name="[f7]"></a>SetLanguage</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, him_user_driver.o(i.SetLanguage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetLanguage &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Language_display
</UL>

<P><STRONG><a name="[f5]"></a>SetScreen</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, him_user_driver.o(i.SetScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetScreen &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Home_Switcher
</UL>

<P><STRONG><a name="[104]"></a>SetTextFlickerCycle</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, him_user_driver.o(i.SetTextFlickerCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetTextFlickerCycle &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[fb]"></a>SetTextFloat</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, him_user_driver.o(i.SetTextFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetTextFloat &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Pressure_display
</UL>

<P><STRONG><a name="[c5]"></a>SetTextInt32</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, him_user_driver.o(i.SetTextInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetTextInt32 &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_TargetTorque_display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorque_display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_GearTorqueValue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTime
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[b1]"></a>SetTextValues</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, him_user_driver.o(i.SetTextValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetTextValues &rArr; SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_TargetTorqueuint_display
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Standard_display
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_MaxTorqueUnit_display
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_Language_display
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_ChartStandard_display
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_ActualPressureuint_display
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bolt_Standard_display
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bolt_Grade_display
</UL>

<P><STRONG><a name="[e5]"></a>Set_ArrayCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hydraulic_process.o(i.Set_ArrayCount))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Model_parameters
</UL>

<P><STRONG><a name="[10b]"></a>Spanner_Sensor_parameter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, data_process.o(i.Spanner_Sensor_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[15b]"></a>Spanner_type_OilReturnTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, data_process.o(i.Spanner_type_OilReturnTime))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_DriverParameter
</UL>

<P><STRONG><a name="[100]"></a>Spanner_type_parameter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, data_process.o(i.Spanner_type_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIM_task
</UL>

<P><STRONG><a name="[b9]"></a>Spi374Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ch374drv.o(i.Spi374Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TransByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
</UL>

<P><STRONG><a name="[bb]"></a>Spi374Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ch374drv.o(i.Spi374Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi374Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
</UL>

<P><STRONG><a name="[15e]"></a>StructToStr</STRONG> (Thumb, 2126 bytes, Stack size 216 bytes, ch374drv.o(i.StructToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = StructToStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
</UL>

<P><STRONG><a name="[183]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxMonitor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2RxMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>TIM3_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(i.TIM3_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[162]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[167]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[4f]"></a>Time_task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task.o(i.Time_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920 + Unknown Stack Size
<LI>Call Chain = Time_task &rArr; TypeC_UartDriver &rArr; Driver_SendChardata &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[16a]"></a>TypeC_UartDriver</STRONG> (Thumb, 3070 bytes, Stack size 2096 bytes, usbtype-c.o(i.TypeC_UartDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920 + Unknown Stack Size
<LI>Call Chain = TypeC_UartDriver &rArr; Driver_SendChardata &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendChardata
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Send32DataValue
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartWrite
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartRead
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_task
</UL>

<P><STRONG><a name="[16e]"></a>TypeC_UartInit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, usbtype-c.o(i.TypeC_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TypeC_UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>TypeC_UartRead</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbtype-c.o(i.TypeC_UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TypeC_UartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
</UL>

<P><STRONG><a name="[16d]"></a>TypeC_UartWrite</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbtype-c.o(i.TypeC_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TypeC_UartWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, driver_usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbtype-c.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hmi_user_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[171]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
</UL>

<P><STRONG><a name="[d2]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
</UL>

<P><STRONG><a name="[d7]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartWrite
</UL>

<P><STRONG><a name="[16f]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
</UL>

<P><STRONG><a name="[d3]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
</UL>

<P><STRONG><a name="[170]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartWrite
</UL>

<P><STRONG><a name="[175]"></a>Uart1_Init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usart.o(i.Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Uart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>Uart2RxMonitor</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, usbtype-c.o(i.Uart2RxMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>UartDriver</STRONG> (Thumb, 606 bytes, Stack size 112 bytes, driver_usart.o(i.UartDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = UartDriver &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartRead
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDriverRev_task
</UL>

<P><STRONG><a name="[163]"></a>UartRxMonitor</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, driver_usart.o(i.UartRxMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>Udisk_task</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, task.o(i.Udisk_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = Udisk_task &rArr; WriteTail &rArr; formationStr &rArr; CH374ByteWrite &rArr; CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UsartDriverRev_task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task.o(i.UsartDriverRev_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = UsartDriverRev_task &rArr; UartDriver &rArr; GetCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[17b]"></a>WriteTail</STRONG> (Thumb, 146 bytes, Stack size 336 bytes, ch374drv.o(i.WriteTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = WriteTail &rArr; formationStr &rArr; CH374ByteWrite &rArr; CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Read
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formationStr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StructToStr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
</UL>

<P><STRONG><a name="[17d]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19b]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[b8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartDriver
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_task
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19c]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[15f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StructToStr
</UL>

<P><STRONG><a name="[19d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[182]"></a>delay_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>delay_ms</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>delay_us</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[17c]"></a>formationStr</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ch374drv.o(i.formationStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = formationStr &rArr; CH374ByteWrite &rArr; CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTail
</UL>

<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[186]"></a>gpio_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gpio.o(i.gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>mStopIfError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ch374drv.o(i.mStopIfError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mStopIfError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udisk_task
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formationStr
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = main &rArr; Get_Flash_Parameters &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; MX25L6406_Write &rArr; MX25L6406_Write_EN &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeC_UartInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L6406_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmi_UartInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Parameters
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_UartInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4e]"></a>start_task</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[75]"></a>xDelayAfterWrite</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch374drv.o(i.xDelayAfterWrite))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>

<P><STRONG><a name="[82]"></a>xFileNameEnumer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch374drv.o(i.xFileNameEnumer))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>

<P><STRONG><a name="[5d]"></a>xQueryInterrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ch374drv.o(i.xQueryInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15c]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15d]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[153]"></a>RTC_NVIC_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(i.RTC_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[122]"></a>OS_InitEventList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11f]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[120]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[121]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[125]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[126]"></a>OS_InitTaskStat</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[12a]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[59]"></a>CH374s29</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374s29 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
</UL>

<P><STRONG><a name="[6e]"></a>CH374s27</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[7b]"></a>CH374s02</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[63]"></a>CH374s31</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374s31 &rArr; CH374_WRITE_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[62]"></a>CH374s30</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[77]"></a>CH374s26</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CH374s26 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
</UL>

<P><STRONG><a name="[8c]"></a>CH374s16</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, CH374BYT.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CH374s16 &rArr; CH374s05 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; xQueryInterrupt &rArr; CH374_READ_REGISTER &rArr; Spi374Start &rArr; SPI3_TransByte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteLocate
</UL>

<P><STRONG><a name="[17e]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[181]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[180]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
